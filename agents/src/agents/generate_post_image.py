# generate_post_image.py
# This file contains the tool for generating images using Google's Imagen model.

import os
from dotenv import load_dotenv
from google.adk.tools import ToolContext
import vertexai
# CHANGED: Removed '.preview' from the import path
from vertexai.generative_models import ImageGenerationModel, Part # Part also needs to be imported for saving artifacts
from typing import Dict

# --- Configuration ---
load_dotenv()

MODEL_IMAGE = "imagen-3.0-generate-002"

try:
    project_id = os.getenv("GOOGLE_CLOUD_PROJECT")
    location = os.getenv("GOOGLE_CLOUD_LOCATION")
    if not project_id or not location:
        raise ValueError("GOOGLE_CLOUD_PROJECT and GOOGLE_CLOUD_LOCATION must be set in .env")

    vertexai.init(project=project_id, location=location)
    image_model = ImageGenerationModel.from_pretrained(MODEL_IMAGE)
    print("Vertex AI Image Model initialized successfully in generate_post_image.py.")
except Exception as e:
    print(f"Warning: Could not initialize Vertex AI Image Model in generate_post_image.py. "
          f"Ensure GOOGLE_CLOUD_PROJECT and GOOGLE_CLOUD_LOCATION are set, and Vertex AI APIs are enabled. Error: {e}")
    image_model = None


# --- Tool Definition ---

def generate_post_image(image_prompt: str, tool_context: ToolContext) -> Dict:
    """Generates an image using Google's Imagen model based on the prompt.
    Saves the image as an artifact and returns its filename and URL.
    """
    print(f"Tool Call: generate_post_image(prompt='{image_prompt}') - Attempting real image generation...")
    if not image_model:
        return {
            "status": "skipped",
            "detail": "Vertex AI Image Model not initialized. Returning static image data.",
            "filename": "static_mvp_generated_image.png",
            "image_url": "https://example.com/static_mvp_generated_image.png"
        }

    try:
        response = image_model.generate_images(
            prompt=image_prompt,
            number_of_images=1,
        )
        if not response.generated_images:
            return {"status": "failed", "detail": "No image generated by model."}

        image_bytes = response.generated_images[0]._image._image_bytes
        filename = "generated_post_image.png"

        # CHANGED: Use the imported Part directly
        tool_context.save_artifact(
            filename,
            Part.from_bytes(data=image_bytes, mime_type="image/png"),
        )
        print(f"Image generated and saved as artifact: {filename}")
        return {
            "status": "success",
            "detail": "Image generated successfully and stored in artifacts.",
            "filename": filename,
            "image_url": f"/artifacts/{filename}"
        }
    except Exception as e:
        print(f"Error generating image: {e}")
        return {
            "status": "error",
            "detail": f"Failed to generate image: {e}",
            "filename": "error_image.png",
            "image_url": "https://example.com/error_image.png"
        }